/*       INTEGRANTES

João Vitor da Silva Nascimento - RM554733 - TURMA 2TDSPZ
Guilherme Alves Pedroso - RM555357 - TURMA 2TDSPZ
Rafael Souza Bezerra - RM557888 - TURMA 2TDSPZ

*/

// --------------------- EXCLUSÃO DAS TABELAS ----------------------------//
DROP TABLE TB_ALERTA CASCADE CONSTRAINTS;
DROP TABLE TB_RELATORIO CASCADE CONSTRAINTS;
DROP TABLE TB_COMANDO_REMOTO CASCADE CONSTRAINTS;
DROP TABLE TB_USER CASCADE CONSTRAINTS;
DROP TABLE TB_SENSOR_IOT CASCADE CONSTRAINTS;
DROP TABLE TB_LEITURA_SENSOR CASCADE CONSTRAINTS;
DROP TABLE TB_ESTACAO CASCADE CONSTRAINTS;

-- --------------------- CRIAÇÃO DAS TABELAS ----------------------------//

CREATE TABLE tb_estacao (
    id_estacao INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nome VARCHAR2(100) NOT NULL,
    localizacao VARCHAR2(200) NOT NULL,
    status VARCHAR2(20) NOT NULL,
    nivel_bateria NUMBER(3) NOT NULL,
    prioridade VARCHAR2(20) NOT NULL,
    CONSTRAINT tb_estacao_pk PRIMARY KEY (id_estacao),
    CONSTRAINT chk_status CHECK (status IN ('ATIVO', 'INATIVO'))
);

CREATE TABLE tb_sensor_iot (
    id_sensor_iot INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    tipo_sensor VARCHAR2(50) NOT NULL,
    descricao_sensor VARCHAR2(255) NOT NULL,
    CONSTRAINT pk_tb_sensor_iot PRIMARY KEY (id_sensor_iot)
);

CREATE TABLE tb_user (
    id_user INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nome VARCHAR2(100) NOT NULL,
    email VARCHAR2(100) NOT NULL,
    senha VARCHAR2(255) NOT NULL,
    nivel_acesso VARCHAR2(20) NOT NULL,
    CONSTRAINT tb_usuario_pk PRIMARY KEY (id_user)
);

CREATE TABLE tb_alerta (
    id_alerta INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    tipo_alerta VARCHAR2(50) NOT NULL,
    mensagem_alerta VARCHAR2(255) NOT NULL,
    data_alerta TIMESTAMP NOT NULL,
    tb_estacao_id_estacao INTEGER NOT NULL,
    tb_user_id_user INTEGER NOT NULL,
    CONSTRAINT tb_alerta_pk PRIMARY KEY (id_alerta),
    CONSTRAINT tb_alerta_tb_estacao_fk FOREIGN KEY (tb_estacao_id_estacao) REFERENCES tb_estacao(id_estacao),
    CONSTRAINT tb_alerta_tb_user_fk FOREIGN KEY (tb_user_id_user) REFERENCES tb_user(id_user)
);

CREATE TABLE tb_comando_remoto (
    id_comando INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    comando VARCHAR2(100) NOT NULL,
    data_execucao TIMESTAMP NOT NULL,
    tb_estacao_id_estacao INTEGER NOT NULL,
    CONSTRAINT tb_comando_remoto_pk PRIMARY KEY (id_comando),
    CONSTRAINT tb_comando_remoto_tb_estacao_fk FOREIGN KEY (tb_estacao_id_estacao) REFERENCES tb_estacao(id_estacao)
);

CREATE TABLE tb_leitura_sensor (
    id_leitura INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    valor NUMBER(10, 2) NOT NULL,
    data_hora TIMESTAMP NOT NULL,
    tb_estacao_id_estacao INTEGER NOT NULL,
    tb_sensor_iot_id_sensor_iot INTEGER NOT NULL,
    CONSTRAINT tb_leitura_sensor_pk PRIMARY KEY (id_leitura),
    CONSTRAINT tb_leitura_sensor_tb_estacao_fk FOREIGN KEY (tb_estacao_id_estacao) REFERENCES tb_estacao(id_estacao),
    CONSTRAINT tb_leitura_sensor_tb_sensor_iot_fk FOREIGN KEY (tb_sensor_iot_id_sensor_iot) REFERENCES tb_sensor_iot(id_sensor_iot)
);

CREATE TABLE tb_relatorio (
    id_relatorio INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    tipo_relatorio VARCHAR2(50) NOT NULL,
    data_criacao TIMESTAMP NOT NULL,
    tb_estacao_id_estacao INTEGER NOT NULL,
    tb_user_id_user INTEGER NOT NULL,
    CONSTRAINT tb_relatorio_pk PRIMARY KEY (id_relatorio),
    CONSTRAINT tb_relatorio_tb_estacao_fk FOREIGN KEY (tb_estacao_id_estacao) REFERENCES tb_estacao(id_estacao),
    CONSTRAINT tb_relatorio_tb_user_fk FOREIGN KEY (tb_user_id_user) REFERENCES tb_user(id_user)
);

        
        
// --------------------- SELECT DAS TABELAS ----------------------------//
SELECT * FROM TB_USER;
SELECT * FROM TB_ALERTA;
SELECT * FROM TB_COMANDO_REMOTO;
SELECT * FROM TB_SENSOR_IOT;
SELECT * FROM TB_RELATORIO;
SELECT * FROM TB_ESTACAO;
SELECT * FROM TB_LEITURA_SENSOR;

SET SERVEROUTPUT ON;
//------------------ INSERINDO DADOS NAS TABELAS --------------------------//
-- 3. Procedures para a Tabela: Estacao

CREATE OR REPLACE PROCEDURE sp_inserir_estacao (
    p_id_estacao IN NUMBER,
    p_nome IN VARCHAR2,
    p_localizacao IN VARCHAR2,
    p_status IN VARCHAR2,
    p_nivel_bateria IN NUMBER,
    p_prioridade IN VARCHAR2
) AS
BEGIN
    INSERT INTO TB_ESTACAO (id_estacao, nome, localizacao, status, nivel_bateria, prioridade)
    VALUES (p_id_estacao, p_nome, p_localizacao, p_status, p_nivel_bateria, p_prioridade);
    COMMIT;
END;
/

BEGIN
    sp_inserir_estacao(1, 'Estacao Norte', 'Rua A, Centro', 'ATIVO', 90, 'BAIXO');
    sp_inserir_estacao(2, 'Estacao Sul', 'Rua B, Bairro Sul', 'ATIVO', 80, 'MEDIO');
    sp_inserir_estacao(3, 'Estacao Leste', 'Av. Leste, 123', 'INATIVO', 75, 'ALTO');
    sp_inserir_estacao(4, 'Estacao Oeste', 'Rua Oeste, 45', 'ATIVO', 85, 'BAIXO');
    sp_inserir_estacao(5, 'Estacao Central', 'Praça Central, 999', 'ATIVO', 95, 'BAIXO');
END;
/

CREATE OR REPLACE PROCEDURE atualizar_estacao (
  p_id_estacao     IN INT,
  p_nome           IN VARCHAR,
  p_localizacao    IN VARCHAR,
  p_status         IN VARCHAR,
  p_nivel_bateria  IN NUMBER,
  p_prioridade     IN VARCHAR
) IS
  v_total INTEGER;
BEGIN
  UPDATE TB_ESTACAO
  SET nome = p_nome,
      localizacao = p_localizacao,
      status = p_status,
      nivel_bateria = p_nivel_bateria,
      prioridade = p_prioridade
  WHERE id_estacao = p_id_estacao;

  v_total := SQL%ROWCOUNT;
  DBMS_OUTPUT.PUT_LINE('atualizar_estacao: ' || v_total || ' linha(s) atualizada(s).');
END;
/

CREATE OR REPLACE PROCEDURE excluir_estacao (
    p_id_estacao IN INT
) IS
  v_total INTEGER;
BEGIN
  DELETE FROM TB_ESTACAO
    WHERE id_estacao = p_id_estacao;

  v_total := SQL%ROWCOUNT;
  DBMS_OUTPUT.PUT_LINE('excluir_estacao: ' || v_total || ' linha(s) excluída(s).');
END;
/

BEGIN
  atualizar_estacao(2, 'Novo Nome', 'Nova Local', 'ATIVO', 50, 'MÉDIA');
  excluir_estacao(5);
END;
/

-- Procedures para a Tabela: Sensor
CREATE OR REPLACE PROCEDURE sp_inserir_sensor_iot (
    p_id_sensor_iot       IN NUMBER,
    p_tipo_sensor         IN VARCHAR2,
    p_descricao_sensor    IN VARCHAR2
) AS
BEGIN
    INSERT INTO TB_SENSOR_IOT (id_sensor_iot, tipo_sensor, descricao_sensor)
    VALUES (p_id_sensor_iot, p_tipo_sensor, p_descricao_sensor);

    COMMIT;
END;
/

BEGIN
    sp_inserir_sensor_iot(1, 'Temperatura', 'Sensor de temperatura ambiente');
    sp_inserir_sensor_iot(2, 'Umidade', 'Sensor de umidade do ar');
    sp_inserir_sensor_iot(3, 'Pressão', 'Sensor de pressão atmosférica');
    sp_inserir_sensor_iot(4, 'Vento', 'Sensor de velocidade e direção do vento');
    sp_inserir_sensor_iot(5, 'Chuva', 'Sensor de intensidade de chuva');
END;
/

CREATE OR REPLACE PROCEDURE sp_atualizar_sensor_iot (
    p_id_sensor_iot       IN NUMBER,
    p_tipo_sensor         IN VARCHAR2,
    p_descricao_sensor    IN VARCHAR2
) AS
    v_rows_updated NUMBER;
BEGIN
    UPDATE TB_SENSOR_IOT
    SET tipo_sensor = p_tipo_sensor,
        descricao_sensor = p_descricao_sensor
    WHERE id_sensor_iot = p_id_sensor_iot;

    v_rows_updated := SQL%ROWCOUNT;

    IF v_rows_updated > 0 THEN
        DBMS_OUTPUT.PUT_LINE(v_rows_updated || ' linha(s) atualizada(s).');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Nenhuma linha atualizada.');
    END IF;

    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE sp_excluir_sensor_iot (
    p_id_sensor_iot IN NUMBER
) AS
    v_rows_deleted NUMBER;
BEGIN
    DELETE FROM TB_SENSOR_IOT
    WHERE id_sensor_iot = p_id_sensor_iot;

    v_rows_deleted := SQL%ROWCOUNT;

    IF v_rows_deleted > 0 THEN
        DBMS_OUTPUT.PUT_LINE(v_rows_deleted || ' linha(s) excluída(s).');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Nenhuma linha excluída.');
    END IF;

    COMMIT;
END;
/

BEGIN
    sp_atualizar_sensor_iot(1, 'Temperatura', 'Sensor de temperatura atualizado');
    sp_excluir_sensor_iot(5);
END;
/


-- Procedures para a Tabela: LeituraSensor
CREATE OR REPLACE PROCEDURE sp_inserir_leitura_sensor (
    p_id_leitura                  IN NUMBER,
    p_valor                       IN NUMBER,
    p_data_hora                   IN TIMESTAMP,
    p_tb_estacao_id_estacao       IN NUMBER,
    p_tb_sensor_iot_id_sensor_iot IN NUMBER
)
AS
BEGIN
    INSERT INTO tb_leitura_sensor (
        id_leitura,
        valor,
        data_hora,
        tb_estacao_id_estacao,
        tb_sensor_iot_id_sensor_iot
    )
    VALUES (
        p_id_leitura,
        p_valor,
        p_data_hora,
        p_tb_estacao_id_estacao,
        p_tb_sensor_iot_id_sensor_iot
    );

    COMMIT;
END;
/

BEGIN
    sp_inserir_leitura_sensor(1, TO_NUMBER('25.50', '9999D99', 'NLS_NUMERIC_CHARACTERS = ''. '''), SYSTIMESTAMP, 1, 1);
    sp_inserir_leitura_sensor(2, TO_NUMBER('60.00', '9999D99', 'NLS_NUMERIC_CHARACTERS = ''. '''), SYSTIMESTAMP, 1, 2);
    sp_inserir_leitura_sensor(3, TO_NUMBER('1013.00', '9999D99', 'NLS_NUMERIC_CHARACTERS = ''. '''), SYSTIMESTAMP, 2, 3);
    sp_inserir_leitura_sensor(4, TO_NUMBER('15.00', '9999D99', 'NLS_NUMERIC_CHARACTERS = ''. '''), SYSTIMESTAMP, 3, 4);
    sp_inserir_leitura_sensor(5, TO_NUMBER('12.30', '9999D99', 'NLS_NUMERIC_CHARACTERS = ''. '''), SYSTIMESTAMP, 4, 5);
END;
/


CREATE OR REPLACE PROCEDURE sp_atualizar_leitura_sensor (
    p_id_leitura                  IN NUMBER,
    p_valor                       IN NUMBER,
    p_data_hora                   IN TIMESTAMP,
    p_tb_estacao_id_estacao       IN NUMBER,
    p_tb_sensor_iot_id_sensor_iot IN NUMBER
) AS
BEGIN
    UPDATE TB_LEITURA_SENSOR
    SET valor = p_valor,
        data_hora = p_data_hora,
        tb_estacao_id_estacao = p_tb_estacao_id_estacao,
        tb_sensor_iot_id_sensor_iot = p_tb_sensor_iot_id_sensor_iot
    WHERE id_leitura = p_id_leitura;

    IF SQL%ROWCOUNT > 0 THEN
        DBMS_OUTPUT.PUT_LINE('Leitura atualizada com sucesso. ID: ' || p_id_leitura);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Nenhuma leitura encontrada para atualizar. ID: ' || p_id_leitura);
    END IF;

    COMMIT;
END;
/


CREATE OR REPLACE PROCEDURE sp_excluir_leitura_sensor (
    p_id_leitura IN NUMBER
) AS
BEGIN
    DELETE FROM TB_LEITURA_SENSOR
    WHERE id_leitura = p_id_leitura;

    IF SQL%ROWCOUNT > 0 THEN
        DBMS_OUTPUT.PUT_LINE('Leitura excluída com sucesso. ID: ' || p_id_leitura);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Nenhuma leitura encontrada para exclusão. ID: ' || p_id_leitura);
    END IF;

    COMMIT;
END;
/

-- Procedures para a Tabela: Usuario
CREATE OR REPLACE PROCEDURE sp_inserir_usuario (
    p_id_user      IN INTEGER,
    p_nome         IN VARCHAR2,
    p_email        IN VARCHAR2,
    p_senha        IN VARCHAR2,
    p_nivel_acesso IN VARCHAR2
) AS
BEGIN
    INSERT INTO tb_user (id_user, nome, email, senha, nivel_acesso)
    VALUES (p_id_user, p_nome, p_email, p_senha, p_nivel_acesso);
    COMMIT;
END;
/

BEGIN
    sp_inserir_usuario(1, 'Joao Silva', 'joao@example.com', 'senha123', 'admin');
    sp_inserir_usuario(2, 'Maria Oliveira', 'maria@example.com', 'senha456', 'user');
    sp_inserir_usuario(3, 'Carlos Souza', 'carlos@example.com', 'senha789', 'user');
    sp_inserir_usuario(4, 'Ana Paula', 'ana@example.com', 'senha000', 'user');
    sp_inserir_usuario(5, 'Pedro Lima', 'pedro@example.com', 'senha321', 'user');
END;
/

CREATE OR REPLACE PROCEDURE atualizar_usuario (
    p_id_user      IN INTEGER,
    p_nome         IN VARCHAR2,
    p_email        IN VARCHAR2,
    p_senha        IN VARCHAR2,
    p_nivel_acesso IN VARCHAR2
) AS
BEGIN
    UPDATE tb_user
    SET nome = p_nome,
        email = p_email,
        senha = p_senha,
        nivel_acesso = p_nivel_acesso
    WHERE id_user = p_id_user;
    COMMIT;
END;
/


CREATE OR REPLACE PROCEDURE excluir_usuario (
    p_id_user IN INTEGER
) AS
BEGIN
    DELETE FROM tb_user
    WHERE id_user = p_id_user;
    COMMIT;
END;
/


-- Procedures para a Tabela: Alerta
CREATE OR REPLACE PROCEDURE sp_inserir_alerta (
    p_id_alerta IN INTEGER,
    p_tipo_alerta IN VARCHAR2,
    p_mensagem_alerta IN VARCHAR2,
    p_data_alerta IN TIMESTAMP,
    p_id_estacao IN INTEGER,
    p_id_usuario IN INTEGER
) AS
BEGIN
    INSERT INTO tb_alerta (
        id_alerta, tipo_alerta, mensagem_alerta, data_alerta,
        tb_estacao_id_estacao, tb_user_id_user
    )
    VALUES (
        p_id_alerta, p_tipo_alerta, p_mensagem_alerta, p_data_alerta,
        p_id_estacao, p_id_usuario
    );
    COMMIT;
END;
/

BEGIN
    sp_inserir_alerta(1, 'Inundacao', 'Alerta de inundação na estação norte', SYSTIMESTAMP, 1, 1);
    sp_inserir_alerta(2, 'Tempestade', 'Alerta de tempestade severa', SYSTIMESTAMP, 2, 2);
    sp_inserir_alerta(3, 'Baixa Bateria', 'Nível de bateria baixo', SYSTIMESTAMP, 3, 3);
    sp_inserir_alerta(4, 'Vento Forte', 'Ventos acima do esperado', SYSTIMESTAMP, 4, 4);
    sp_inserir_alerta(5, 'Alta Temperatura', 'Temperatura acima do limite', SYSTIMESTAMP, 5, 5);
END;
/

CREATE OR REPLACE PROCEDURE atualizar_alerta (
    p_id_alerta IN INTEGER,
    p_tipo_alerta IN VARCHAR2,
    p_mensagem_alerta IN VARCHAR2
) AS
BEGIN
    UPDATE tb_alerta
    SET tipo_alerta = p_tipo_alerta,
        mensagem_alerta = p_mensagem_alerta
    WHERE id_alerta = p_id_alerta;
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE excluir_alerta (
    p_id_alerta IN INTEGER
) AS
BEGIN
    DELETE FROM tb_alerta
    WHERE id_alerta = p_id_alerta;
    COMMIT;
END;
/

-- Procedures para a Tabela: ComandoRemoto
CREATE OR REPLACE PROCEDURE sp_inserir_comando_remoto (
    p_id_comando IN INTEGER,
    p_id_estacao IN INTEGER,
    p_comando IN VARCHAR2,
    p_data_execucao IN TIMESTAMP
) AS
BEGIN
    INSERT INTO tb_comando_remoto (id_comando, tb_estacao_id_estacao, comando, data_execucao)
    VALUES (p_id_comando, p_id_estacao, p_comando, p_data_execucao);
    COMMIT;
END;
/


BEGIN
    sp_inserir_comando_remoto(1, 1, 'Reiniciar', SYSTIMESTAMP);
    sp_inserir_comando_remoto(2, 2, 'Atualizar Firmware', SYSTIMESTAMP);
    sp_inserir_comando_remoto(3, 3, 'Resetar Leitura', SYSTIMESTAMP);
    sp_inserir_comando_remoto(4, 4, 'Desligar', SYSTIMESTAMP);
    sp_inserir_comando_remoto(5, 5, 'Ligar', SYSTIMESTAMP);
END;
/

CREATE OR REPLACE PROCEDURE atualizar_comando (
    p_id_comando IN INTEGER,
    p_comando IN VARCHAR2
) AS
BEGIN
    UPDATE tb_comando_remoto
    SET comando = p_comando
    WHERE id_comando = p_id_comando;
    COMMIT;
END;
/


CREATE OR REPLACE PROCEDURE excluir_comando (
    p_id_comando IN INTEGER
) AS
BEGIN
    DELETE FROM tb_comando_remoto
    WHERE id_comando = p_id_comando;
    COMMIT;
END;
/

-- Procedures para a Tabela: Relatorio
CREATE OR REPLACE PROCEDURE sp_inserir_relatorio (
    p_id_relatorio         IN INTEGER,
    p_tipo_relatorio       IN VARCHAR2,
    p_data_criacao         IN TIMESTAMP,
    p_tb_estacao_id_estacao IN INTEGER,
    p_tb_user_id_user      IN INTEGER
) AS
BEGIN
    INSERT INTO tb_relatorio (id_relatorio, tipo_relatorio, data_criacao, tb_estacao_id_estacao, tb_user_id_user)
    VALUES (p_id_relatorio, p_tipo_relatorio, p_data_criacao, p_tb_estacao_id_estacao, p_tb_user_id_user);
    COMMIT;
END;
/

BEGIN
    sp_inserir_relatorio(1, 'Relatório Norte', SYSTIMESTAMP, 1, 1);
    sp_inserir_relatorio(2, 'Relatório Sul', SYSTIMESTAMP, 2, 2);
    sp_inserir_relatorio(3, 'Relatório Leste', SYSTIMESTAMP, 3, 3);
    sp_inserir_relatorio(4, 'Relatório Oeste', SYSTIMESTAMP, 4, 4);
    sp_inserir_relatorio(5, 'Relatório Norte', SYSTIMESTAMP, 5, 5);
    sp_inserir_relatorio(6, 'Relatório Central', SYSTIMESTAMP, 2, 2);
    sp_inserir_relatorio(7, 'Relatório Sul', SYSTIMESTAMP, 3, 3);
    sp_inserir_relatorio(8, 'Relatório Oeste', SYSTIMESTAMP, 5, 5);
    sp_inserir_relatorio(9, 'Relatório Sul', SYSTIMESTAMP, 4, 4);
END;
/


CREATE OR REPLACE PROCEDURE atualizar_relatorio (
    p_id_relatorio   IN INTEGER,
    p_tipo_relatorio IN VARCHAR2
)
AS
BEGIN
    UPDATE tb_relatorio
    SET tipo_relatorio = p_tipo_relatorio
    WHERE id_relatorio = p_id_relatorio;
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE excluir_relatorio (
    p_id_relatorio IN INTEGER
)
AS
BEGIN
    DELETE FROM tb_relatorio
    WHERE id_relatorio = p_id_relatorio;
    COMMIT;
END;
/


// -------------------------- Funções para Retorno de Dados Processados --------------------------//
-- função calcular_media_bateria
CREATE OR REPLACE FUNCTION calcular_media_bateria RETURN NUMBER
IS
    v_media NUMBER;
BEGIN
    SELECT AVG(nivel_bateria) INTO v_media FROM TB_ESTACAO;
    RETURN v_media;
END;
/

-- função total_alertas_por_usuario
CREATE OR REPLACE FUNCTION total_alertas_por_usuario (p_id_user INT) RETURN NUMBER
IS
    v_total_alertas NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_total_alertas
    FROM TB_ALERTA
    WHERE TB_USER_ID_USER = p_id_user;
    RETURN v_total_alertas;
END;
/

-- Bloco para mostrar o resultado da função calcular_media_bateria
DECLARE
    v_media NUMBER;
BEGIN
    v_media := calcular_media_bateria;
    DBMS_OUTPUT.PUT_LINE('Média do nível da bateria: ' || v_media);
END;
/

-- Bloco para mostrar o resultado da função total_alertas_por_usuario para usuário 101
DECLARE
    v_total NUMBER;
BEGIN
    v_total := total_alertas_por_usuario(101);
    DBMS_OUTPUT.PUT_LINE('Total de alertas do usuário 101: ' || v_total);
END;
/


SELECT calcular_media_bateria FROM dual;
SELECT total_alertas_por_usuario(101) FROM dual;


SET SERVEROUTPUT ON;

// -------------------------- BLOCOS ANÔNIMOS --------------------------//

-- BLOCO 1: Relatórios por estação com controle
DECLARE
    v_id_estacao TB_ESTACAO.id_estacao%TYPE;
    v_nome_estacao TB_ESTACAO.nome%TYPE;
    v_qtd_relatorios NUMBER;
BEGIN
    DBMS_OUTPUT.PUT_LINE('Relatórios por estação com mais de 1 relatório:');
     DBMS_OUTPUT.PUT_LINE('--------------------------------------------------');
    FOR rec IN (
        SELECT e.id_estacao, e.nome, COUNT(r.id_relatorio) AS qtd_relatorios
        FROM TB_ESTACAO e
        JOIN TB_RELATORIO r ON r.TB_ESTACAO_id_estacao = e.id_estacao
        GROUP BY e.id_estacao, e.nome
        HAVING COUNT(r.id_relatorio) > 1
        ORDER BY qtd_relatorios DESC
    ) LOOP
        v_id_estacao := rec.id_estacao;
        v_nome_estacao := rec.nome;
        v_qtd_relatorios := rec.qtd_relatorios;

        IF v_qtd_relatorios >= 5 THEN
            DBMS_OUTPUT.PUT_LINE('>> Estação: ' || v_nome_estacao || ' | Relatórios: ' || v_qtd_relatorios || ' (ALTO)');
        ELSE
            DBMS_OUTPUT.PUT_LINE('Estação: ' || v_nome_estacao || ' | Relatórios: ' || v_qtd_relatorios);
        END IF;
    END LOOP;
END;
/


-- BLOCO 2: Listar usuários com mais de 1 relatório e exibir a média de relatórios por estação.
DECLARE
    v_id_user TB_USER.id_user%TYPE;
    v_nome TB_USER.nome%TYPE;
    v_qtd_relatorios INTEGER;
BEGIN
    DBMS_OUTPUT.PUT_LINE('Relatórios por usuário com mais de 1 relatório:');
    DBMS_OUTPUT.PUT_LINE('--------------------------------------------------');
    
    FOR rec IN (
        SELECT u.id_user, u.nome, COUNT(r.id_relatorio) AS qtd_relatorios
        FROM TB_USER u
        JOIN TB_RELATORIO r ON r.TB_USER_id_user = u.id_user
        GROUP BY u.id_user, u.nome
        HAVING COUNT(r.id_relatorio) > 1
        ORDER BY qtd_relatorios DESC
    ) LOOP
        v_id_user := rec.id_user;
        v_nome := rec.nome;
        v_qtd_relatorios := rec.qtd_relatorios;

        DBMS_OUTPUT.PUT_LINE('Usuário: ' || v_nome || ' - Relatórios gerados: ' || v_qtd_relatorios);
    END LOOP;
END;
/


// -------------------------- SELECTS --------------------------//
-- SELECT 1  Estações com média de nível de bateria
SELECT 
    nome, 
    localizacao,
    prioridade,
    AVG(nivel_bateria) AS media_bateria
FROM TB_ESTACAO
GROUP BY nome, localizacao, prioridade
ORDER BY media_bateria DESC;

-- SELECT 2  Tipos de sensor que aparecem 1 vez
SELECT 
    tipo_sensor, 
    MIN(descricao_sensor) AS descricao, 
    COUNT(*) AS qtd_sensores
FROM TB_SENSOR_IOT
GROUP BY tipo_sensor
HAVING COUNT(*) = 1
ORDER BY tipo_sensor;

--SELECT 3  Top 5 estações com mais alertas
SELECT 
    e.nome, 
    COUNT(a.id_alerta) AS qtd_alertas
FROM TB_ESTACAO e
JOIN TB_ALERTA a ON a.tb_estacao_id_estacao = e.id_estacao
GROUP BY e.nome
ORDER BY qtd_alertas DESC
FETCH FIRST 5 ROWS ONLY;


-- SELECT 4  Relatórios do último mês
SELECT 
    r.id_relatorio, 
    u.nome AS usuario, 
    e.nome AS estacao,
    r.tipo_relatorio, 
    r.data_criacao
FROM TB_RELATORIO r
JOIN TB_USER u ON u.id_user = r.tb_user_id_user
JOIN TB_ESTACAO e ON e.id_estacao = r.tb_estacao_id_estacao
WHERE r.data_criacao >= ADD_MONTHS(SYSDATE, -1)
ORDER BY r.data_criacao DESC;


-- SELECT 5  Estações com comandos nos últimos 7 dias
SELECT 
    e.nome, 
    COUNT(c.id_comando) AS qtd_comandos,
    MAX(c.data_execucao) AS ultima_execucao
FROM TB_ESTACAO e
JOIN TB_COMANDO_REMOTO c ON c.tb_estacao_id_estacao = e.id_estacao
WHERE c.data_execucao >= SYSDATE - 7
GROUP BY e.nome
ORDER BY qtd_comandos DESC;




SET VERIFY OFF;
